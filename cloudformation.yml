AWSTemplateFormatVersion: "2010-09-09"
Description: Frontend rendering service

Parameters:
    App:
        Description: Application name
        Type: String
        Default: moon
    Stage:
        Description: Stage name
        Type: String
        AllowedValues:
            - PROD
            - CODE
        Default: CODE
    Stack:
        Description: Stack name
        Type: String
        Default: frontend

Resources:
    Role:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                             - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Path: /
            Policies:
                - PolicyName: logs
                  PolicyDocument:
                      Statement:
                          Effect: Allow
                          Action:
                              - logs:CreateLogGroup
                              - logs:CreateLogStream
                              - logs:PutLogEvents
                          Resource: arn:aws:logs:*:*:*
                - PolicyName: LambdaPolicy
                  PolicyDocument:
                      Statement:
                          - Effect: Allow
                            Action:
                            - lambda:InvokeFunction
                            Resource: "*"

    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            Description: Frontend rendering service
            FunctionName: !Sub ${App}-${Stage}
            Code:
                S3Bucket: gu-moon
                S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
            Handler: render.handler
            Role:
                Fn::GetAtt:
                - Role
                - Arn
            MemorySize: 128
            Runtime: nodejs8.10
            Timeout: 300
        DependsOn:
        - Role

    LambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:invokeFunction
            FunctionName: !Sub ${App}-${Stage}
            Principal: apigateway.amazonaws.com
        DependsOn: LambdaFunction

    ApiGatewayRestAPI:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Description: Api to call our lambda
            Name: !Sub ${App}-api-${Stage}

    ApiGatewayResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref ApiGatewayRestAPI
            ParentId: !GetAtt [ApiGatewayRestAPI, RootResourceId]
            PathPart: "{proxy+}"
        DependsOn: ApiGatewayRestAPI

    ApiGatewayWildCardMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref ApiGatewayRestAPI
            ResourceId: !Ref ApiGatewayResource
            HttpMethod: ANY
            Integration:
              Type: AWS_PROXY
              IntegrationHttpMethod: POST
              Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        DependsOn:
        - ApiGatewayRestAPI
        - LambdaFunction
        - ApiGatewayResource

    APIGatewayStage:
        Type: AWS::ApiGateway::Stage
        Properties:
            Description: Stage frontend rendering service
            RestApiId: !Ref ApiGatewayRestAPI
            DeploymentId: !Ref APIGatewayDeployment
            StageName: !Ref Stage
        DependsOn: ApiGatewayWildCardMethod

    APIGatewayDeployment:
        Type: AWS::ApiGateway::Deployment
        Properties:
            Description: Deploys moon into an environment/stage
            RestApiId: !Ref ApiGatewayRestAPI
        DependsOn: ApiGatewayWildCardMethod
